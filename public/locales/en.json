{
    "title": "Number System Converter",
    "form.inputText": "Enter number:",
    "form.inputPlaceholder": "255, 15.5, FF, 377",
    "form.fromBase": "From base:",
    "form.toBase": "To base:",
    "form.baseOption.2": "Binary (2)",
    "form.baseOption.8": "Octal (8)",
    "form.baseOption.10": "Decimal (10)",
    "form.baseOption.16": "Hexadecimal (16)",
    "form.baseOption.custom": "Other",
    "form.customBaseLabel": "Base (2-36):",
    "form.convertButton": "Convert",
    "result.title": "CONVERSION RESULT:",
    "result.fromSystem": "(BASE {base})",
    "result.toSystem": "(BASE {base})",
    "result.throughDecimal": "VIA DECIMAL: {decimal}",
    "steps.toggle.show": "Show detailed steps",
    "steps.toggle.hide": "Hide detailed steps",
    "steps.title": "DETAILED CONVERSION STEPS",
    "steps.step": "Step {num}:",
    "examples.title": "Examples:",
    "examples.item4": "Supports bases from 2 to 36",
    "error.enterNumber": "Please enter a number to convert",
    "error.fromBaseRange": "Source base must be between 2 and 36",
    "error.toBaseRange": "Target base must be between 2 and 36",
    "error.invalidChars": "The number \"{number}\" contains invalid characters for base {base}",
    "error.conversion": "Error during conversion: {message}",
    "step.split": "Splitting number {number} into integer and fractional parts",
    "step.parts": "Integer part: {integer}, fractional: {fractional}",
    "step.decResult": "Decimal representation: {intResult} + {fracResult} = {total}",
    "step.zeroIsZero": "Number 0 remains 0 in any base system",
    "step.intConversionDetails": "Converting integer part {integer} from base {fromBase} to decimal:\n{details}Sum: {sum}",
    "step.fracConversionDetails": "Converting fractional part {fractional} from base {fromBase} to decimal:\n{details}Sum: {sum}",
    "step.intToBaseDetails": "Converting integer part {integer} to base {toBase}:\n{details}Result: {result} (read remainders from bottom to top)",
    "step.fracToBaseDetails": "Converting fractional part {fractional} to base {toBase}:\n{details}Result: {result}",
    "step.finalResult": "Result: {result}",
    "step.remainder": "remainder",
    "step.integerPart": "integer part"
}
